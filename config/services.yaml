# config/services.yaml

parameters:
    project_dir: '%kernel.project_dir%'

imports:
  - { resource: clubs.yaml }  # Importe le fichier clubs.yaml où se trouve la liste des clubs

services:
  # Configuration par défaut pour les services dans ce fichier
  _defaults:
    autowire: true
    autoconfigure: true
    public: false

  # Rend toutes les classes du dossier src/ disponibles en tant que services
  # Cela crée un service par classe dont l'ID est le nom de la classe entièrement qualifié
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'

  # Alias pour injecter correctement le LoggerInterface
  Psr\Log\LoggerInterface: '@logger'

  ######################################################
  # Configuration spécifique pour ClubUrlProvider
  ######################################################
  App\Service\ClubUrlProvider:
    arguments:
      $clubUrls: '%clubs_mapping%'  # On injecte le mapping depuis clubs.yaml

  ######################################################
  # Configuration spécifique pour MatchResultsService
  ######################################################
  App\Service\MatchResultsService:
    arguments:
      $logger: '@logger'
      # si tu as besoin du projectDir, décommente la ligne ci-dessous :
      # $projectDir: '%kernel.project_dir%'

  ######################################################
  # Configuration spécifique pour ResultatsService (si tu l'utilises encore)
  ######################################################
  # App\Service\ResultatsService:
  #   arguments:
  #     $projectDir: '%kernel.project_dir%'

  ######################################################
  # Configuration spécifique pour LiveResultatsService (si tu l'utilises encore)
  ######################################################
  App\Service\LiveResultatsService:
    arguments:
      $projectDir: '%kernel.project_dir%'

  ######################################################
  # EventListener (exemple) pour activer un cache global
  ######################################################
  App\EventListener\CacheResponseListener:
    tags:
      - { name: kernel.event_listener, event: kernel.response }

  ######################################################
  # Listener pour générer automatiquement les slugs des équipes
  ######################################################
  App\EventListener\TeamSlugListener:
    arguments:
      $slugger: '@slugger'
      $teamRepository: '@App\Repository\TeamRepository'
    tags:
      - { name: doctrine.orm.entity_listener, event: prePersist, entity: App\Entity\Team, method: prePersist }
      - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Entity\Team, method: preUpdate }

  ######################################################
  # CacheWarmer pour précharger les données Scorenco
  ######################################################
  App\Cache\ResultatsCacheWarmer:
    tags:
      - { name: kernel.cache_warmer }