{% extends 'base.html.twig' %}

{% block title %}{{ title }}{% endblock %}

{% block body %}


<script>
    /* Carrousel = 5 articles max (articlesForSlider) */
    window.sliderArticles = {{ articlesForSlider|default([])|map(article => {
        title: article.title,
        category: article.category,
        date: article.updatedAt|date('Y-m-d'),
        teams: article.teams|map(team => team.name),
        image: article.imageName ? vich_uploader_asset(article, 'imageFile') : '/images/default-article.png',
        content: article.content|striptags|slice(0, 150) ~ '...',
        link: path('article_show', {'slug': article.slug})
    })|json_encode|raw }};

    /* Grille d'articles = tous ou paginés, au choix (ici on suppose qu'on veut tout charger) */
    window.allArticles = {{ articles|default([])|map(article => {
        title: article.title,
        category: article.category,
        date: article.updatedAt|date('Y-m-d'),
        teams: article.teams|map(team => team.name),
        image: article.imageName ? vich_uploader_asset(article, 'imageFile') : '/images/default-article.png',
        content: article.content|striptags|slice(0, 100) ~ '...',
        link: path('article_show', {'slug': article.slug})
    })|json_encode|raw }};
</script>

<!-- == CARROUSEL == -->
<div class="container mx-auto py-8" x-data="carouselComponent()" x-init="init()">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl sm:text-3xl text-primary-blue font-title">
            {{ title }}
        </h1>
    </div>

    <div class="relative overflow-hidden rounded-lg shadow-md h-80 sm:h-96">
        <template x-for="(article, index) in articles" :key="index">
            <div
                x-show="currentIndex === index"
                class="absolute inset-0 transition-all duration-700 ease-in-out"
            >
                <a :href="article.link" class="block h-full w-full">
    <img
        :src="article.image"
        :alt="article.title"
        class="w-full h-80 sm:h-96 object-cover"
    />
    <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-60 text-white p-4">
        <h2 class="text-lg sm:text-2xl" x-text="article.title"></h2>
        <p class="text-sm sm:text-base mt-2" x-text="article.content"></p>
    </div>
</a>

            </div>
        </template>
    </div>

    <div class="flex justify-end mt-4 space-x-2 items-center">
        <template x-for="(article, i) in articles" :key="i">
            <button
                @click="currentIndex = i"
                class="w-3 h-3 rounded-full"
                :class="{'bg-primary-blue': currentIndex === i, 'bg-gray-300': currentIndex !== i}"
            ></button>
        </template>
    </div>
</div>

<!-- == SECTION FILTRES / RECHERCHE / TRI + PAGINATION (3 articles par page) == -->
<div class="container mx-auto mt-12 " x-data="sortableArticles()" x-init="init()">
    <!-- BLOC DE FILTRES -->
    <div class="bg-white shadow-md rounded-md p-4 mb-6">
        <div class="flex flex-col sm:flex-row justify-between items-center gap-4 flex-wrap">
            <!-- Tri (date, titre, catégorie) -->
            <div class="w-full sm:w-auto flex items-center gap-2">
                <label for="sort" class="text-sm font-medium text-gray-700 flex items-center gap-1">
                    <i class="fas fa-sort"></i> Trier par :
                </label>
                <select
                    id="sort"
                    x-model="sortKey"
                    @change="applyAllFilters()"
                    class="border border-gray-300 text-sm rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
                >
                    <option value="date_desc">Date ↓</option>
                    <option value="date_asc">Date ↑</option>
                    <option value="title">Titre A-Z</option>
                    <option value="category">Catégorie A-Z</option>
                </select>
            </div>

            <!-- Barre de recherche -->
            <div class="w-full sm:w-1/3 flex items-center relative">
                <span class="absolute left-3 text-gray-400">
                    <i class="fas fa-search"></i>
                </span>
                <input
                    type="text"
                    x-model="searchQuery"
                    @input="applyAllFilters()"
                    placeholder="Rechercher un article..."
                    class="w-full pl-9 border border-gray-300 text-sm rounded-md py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
                >
            </div>

            <!-- Filtre Catégorie -->
            <div class="w-full sm:w-auto flex items-center gap-2">
                <label class="text-sm font-medium text-gray-700 flex items-center gap-1">
                    <i class="fas fa-tags"></i> Catégorie
                </label>
                <select
                    x-model="selectedCategory"
                    @change="applyAllFilters()"
                    class="border border-gray-300 text-sm rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
                >
                    <option value="">Toutes</option>
                    <template x-for="cat in categories" :key="cat">
                        <option :value="cat" x-text="cat"></option>
                    </template>
                </select>
            </div>

            <!-- Filtre Équipe -->
            <div class="w-full sm:w-auto flex items-center gap-2">
                <label class="text-sm font-medium text-gray-700 flex items-center gap-1">
                    <i class="fas fa-users"></i> Équipe
                </label>
                <select
                    x-model="selectedTeam"
                    @change="applyAllFilters()"
                    class="border border-gray-300 text-sm rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
                >
                    <option value="">Toutes</option>
                    <template x-for="team in teams" :key="team">
                        <option :value="team" x-text="team"></option>
                    </template>
                </select>
            </div>

            <!-- Bouton Réinitialiser -->
            <div class="w-full sm:w-auto flex items-center">
                <button
                    @click="resetAll()"
                    class="border border-gray-300 text-sm  py-2 rounded-md bg-gray-100 hover:bg-gray-200 flex items-center gap-2"
                >
                    <i class="fas fa-undo"></i> Réinitialiser
                </button>
            </div>
        </div>
    </div>

    <!-- Aucune correspondance -->
    <template x-if="pagedArticles.length === 0">
        <div class="text-center text-gray-500 py-8">
            <i class="fas fa-info-circle mr-2"></i>Aucun article ne correspond à votre recherche.
        </div>
    </template>

    <!-- GRILLE D'ARTICLES (page en cours seulement) -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <template x-for="(article, index) in pagedArticles" :key="index">
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <img
                    :src="article.image"
                    :alt="article.title"
                    class="w-full h-48 object-cover"
                >
                <div class="p-4">
                    <h3 class="text-lg text-gray-800 truncate" x-text="article.title"></h3>
                    <p class="text-sm text-gray-600 mt-1">
                        <span class="font-semibold">Catégorie :</span>
                        <span x-text="article.category"></span>
                    </p>
                    <p
                        class="text-sm text-gray-600 mt-1"
                        x-show="article.teams.length > 0"
                    >
                        <span class="font-semibold">Équipes :</span>
                        <span x-text="article.teams.join(', ')"></span>
                    </p>
                    <p class="text-gray-700 text-sm mt-2" x-text="article.content"></p>
                    <a
                        :href="article.link"
                        class="inline-block mt-4 bg-blue-500 text-white text-sm px-4 py-2 rounded hover:bg-blue-600"
                    >
                        <i class="fas fa-book-reader mr-1"></i> Lire l'article
                    </a>
                </div>
            </div>
        </template>
    </div>

    <!-- PAGINATION (3 articles/page) -->
    <div class="flex justify-center mt-6">
    {{ knp_pagination_render(articles) }}
</div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
<script>
function carouselComponent() {
    return {
        articles: [],
        currentIndex: 0,
        interval: null,
        init() {
            this.articles = window.sliderArticles ?? [];
            if (this.articles.length > 1) {
                this.interval = setInterval(() => {
                    this.currentIndex = (this.currentIndex + 1) % this.articles.length;
                }, 5000);
            }
        }
    };
}

function sortableArticles() {
    return {
        // Données brutes
        originalArticles: window.allArticles ?? [],

        // Datasets dérivés
        filteredArticles: [],
        pagedArticles: [], // articles de la page courante

        // Filtres
        sortKey: 'date_desc',
        searchQuery: '',
        selectedCategory: '',
        selectedTeam: '',
        categories: [],
        teams: [],

        // Pagination (3 articles / page)
        perPage: 6,
        currentPage: 1,

        init() {
            this.extractFilters();
            this.applyAllFilters(); 
        },

        // Récupération des catégories/équipes
        extractFilters() {
            const catSet = new Set();
            const teamSet = new Set();

            this.originalArticles.forEach(article => {
                catSet.add(article.category);
                article.teams?.forEach(team => teamSet.add(team));
            });

            this.categories = Array.from(catSet).sort();
            this.teams = Array.from(teamSet).sort();
        },

        // Handler global
        applyAllFilters() {
            this.filterArticles();
            this.sortArticles();
            this.currentPage = 1; // on revient page 1
            this.updatePagedArticles();
        },

        // Réinitialiser
        resetAll() {
            this.searchQuery = '';
            this.selectedCategory = '';
            this.selectedTeam = '';
            this.sortKey = 'date_desc';
            this.currentPage = 1;
            this.applyAllFilters();
        },

        // Filtre (search, cat, team)
        filterArticles() {
            const query = this.searchQuery.toLowerCase();

            this.filteredArticles = this.originalArticles.filter(article => {
                const matchesSearch =
                    article.title.toLowerCase().includes(query) ||
                    article.content.toLowerCase().includes(query);

                const matchesCategory =
                    !this.selectedCategory || article.category === this.selectedCategory;

                const matchesTeam =
                    !this.selectedTeam || (article.teams && article.teams.includes(this.selectedTeam));

                return matchesSearch && matchesCategory && matchesTeam;
            });
        },

        // Tri
        sortArticles() {
            this.filteredArticles.sort((a, b) => {
                switch (this.sortKey) {
                    case 'title':
                        return a.title.localeCompare(b.title);
                    case 'category':
                        return a.category.localeCompare(b.category);
                    case 'date_asc':
                        return new Date(a.date) - new Date(b.date);
                    default:
                        // date_desc
                        return new Date(b.date) - new Date(a.date);
                }
            });
        },

        // Pagination
        updatePagedArticles() {
            const start = (this.currentPage - 1) * this.perPage;
            const end = start + this.perPage;
            this.pagedArticles = this.filteredArticles.slice(start, end);
        },
        goToPage(page) {
            this.currentPage = page;
            this.updatePagedArticles();
        },
        nextPage() {
            if (this.currentPage < this.totalPages) {
                this.currentPage++;
                this.updatePagedArticles();
            }
        },
        prevPage() {
            if (this.currentPage > 1) {
                this.currentPage--;
                this.updatePagedArticles();
            }
        },
        get totalPages() {
            return Math.ceil(this.filteredArticles.length / this.perPage);
        },
        get pageCount() {
            return this.totalPages; // identique, si tu veux un alias
        }
    };
}
</script>
{% endblock %}
